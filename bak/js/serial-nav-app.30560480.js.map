{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack:///./src/plugins/serial/base-serial.js","webpack:///./src/plugins/serial/navserial.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","signalMap","dtr","rts","brk","cts","dsr","dcd","BaseSerial","requestRequired","mute","baud","Number","window","localStorage","currentBaudRate","lastBaud","encoding","devices","currentDevice","connected","implementation","serial","DEBUG","process","VUE_APP_DEBUG","Vue","$serial","this","Promise","all","map","device","isDevice","value","isDevices","filter","i","console","log","update","baudRate","setBaud","val","sig","trans","Object","keys","forEach","signals","isOpen","Error","sigs","_transSignal","set","get","resolve","reject","read","buff","err","toString","write","_currentDevice","open","emit","pause","close","resume","name","push","find","d","cb","connect","opts","disconnect","setSignals","getSignals","size","readBuff","slice","Math","min","length","Infinity","paused","message","writeBuff","Buffer","from","EventEmitter","navigator","NavSerial","JSON","parse","portNames","handlesSelect","_dataHandler","_lastRead","_openHandler","args","_closeHandler","_initSerial","requestPort","classCode","setCurrentDevice","_getDevice","port","BrowserSerialPort","autoOpen","on","off","_unregisterSerial","_registerSerial","lastNavSerialPort","stringify","getInfo","error","usbProductId","usbVendorId","getPorts","info"],"mappings":"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","file":"js/serial-nav-app.30560480.js","sourcesContent":["export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","/* eslint-disable no-unused-vars */\r\n/* eslint-disable class-methods-use-this */\r\nimport EventEmitter from 'events';\r\n\r\n/*\r\nInterface should emit the following:\r\nthis.emit('data', buffer)\r\nthis.emit('message', string) // should be a string version of buffer\r\n// message should not be emitted whilst this.mute === true\r\nthis.emit('connected', value)\r\nthis.emit('disconnected', value)\r\nthis.emit('deviceNamePrompt', value) // prompts the user to input a readable device name\r\n*/\r\n\r\nconst signalMap = {\r\n  dtr: 'dataTerminalReady',\r\n  rts: 'requestToSend',\r\n  brk: 'break',\r\n  cts: 'clearToSend',\r\n  dsr: 'dataSetReady',\r\n  dcd: 'dataCarrierDetect',\r\n};\r\n\r\nclass BaseSerial extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n    this.requestRequired = false;\r\n    this.mute = false;\r\n    this.baud = Number(window.localStorage.currentBaudRate) || 115200;\r\n    this.lastBaud = 115200;\r\n    this.encoding = 'ascii';\r\n    this.devices = [];\r\n    this.currentDevice = null;\r\n    this.connected = false;\r\n    this.implementation = 'basic';\r\n    this.serial = null;\r\n    this.DEBUG = !!process.env.VUE_APP_DEBUG;\r\n    // eslint-disable-next-line no-console\r\n    // console.log('debug', this.DEBUG);\r\n  }\r\n\r\n  install(Vue) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    Vue.$serial = this;\r\n    // eslint-disable-next-line no-param-reassign\r\n    Vue.prototype.$serial = this;\r\n  }\r\n\r\n  async requestDevice() { return {}; }\r\n\r\n  async listDevices() {\r\n    const isDevices = await Promise.all(this.devices.map((device) => this.isDevice(device.value)));\r\n    return this.devices.filter((device, i) => isDevices[i]);\r\n  }\r\n\r\n  async isDevice(value) { return true; }\r\n\r\n  async setCurrentDevice(value) { this.currentDevice = value; }\r\n\r\n  async setBaud(baud) {\r\n    // eslint-disable-next-line no-console\r\n    if (this.DEBUG) console.log('setting speed', baud);\r\n    if (this.serial) await this.serial.update({ baudRate: baud });\r\n    this.baud = baud;\r\n    window.localStorage.currentBaudRate = baud;\r\n    return baud;\r\n  }\r\n\r\n  async resetBaud() {\r\n    this.setBaud(this.lastBaud);\r\n  }\r\n\r\n  async setMute(val) { this.mute = val; }\r\n\r\n  _transSignal(sig) {\r\n    let trans = {};\r\n    if (typeof sig === 'object') {\r\n      trans = { ...sig };\r\n    }\r\n    if (sig === 'on' || sig === true) {\r\n      trans = {\r\n        dtr: true,\r\n        rts: true,\r\n      };\r\n    }\r\n    if (sig === 'off' || sig === false) {\r\n      trans = {\r\n        dtr: false,\r\n        rts: false,\r\n      };\r\n    }\r\n    Object.keys(signalMap).forEach((i) => {\r\n      if (typeof trans[i] === 'boolean') trans[signalMap[i]] = trans[i];\r\n      if (typeof trans[signalMap[i]] === 'boolean') trans[i] = trans[signalMap[i]];\r\n    });\r\n    return trans;\r\n  }\r\n\r\n  async setSignals(signals) {\r\n    if (!this.serial?.isOpen) throw new Error('Cannot write to closed port.');\r\n    // eslint-disable-next-line no-console\r\n    if (this.DEBUG) console.log('signaling', signals);\r\n    const sigs = this._transSignal(signals);\r\n    return this.serial.set(sigs);\r\n  }\r\n\r\n  async getSignals() {\r\n    if (!this.serial?.isOpen) throw new Error('Cannot read closed port.');\r\n    const signals = await this.serial.get();\r\n    return this._transSignal(signals);\r\n  }\r\n\r\n  readBuff() {\r\n    return new Promise((resolve, reject) => this.serial?.read((buff, err) => {\r\n      if (err) reject(err);\r\n      else resolve();\r\n    }));\r\n  }\r\n\r\n  writeBuff(buff) {\r\n    // eslint-disable-next-line no-console\r\n    if (this.DEBUG) console.log('write', buff.toString('hex'));\r\n    return new Promise((resolve, reject) => this.serial.write(buff, (err) => {\r\n      if (err) reject(err);\r\n      else resolve();\r\n    }));\r\n  }\r\n\r\n  connect() {\r\n    if (!this.serial) throw new Error('Cannot connect to un-initiated device.');\r\n    if (!this._currentDevice || this.serial.isOpen) {\r\n      // eslint-disable-next-line no-console\r\n      if (this.DEBUG) console.log('skipping connect');\r\n      return Promise.resolve();\r\n    }\r\n    return new Promise((resolve, reject) => this.serial.open((err) => {\r\n      if (err) return reject(err);\r\n      this.connected = true;\r\n      this.emit('connected', this.currentDevice);\r\n      return resolve();\r\n    }));\r\n  }\r\n\r\n  async disconnect() {\r\n    if (!this._currentDevice || !this.serial?.isOpen) return;\r\n    this.serial.pause();\r\n    await this.serial.close();\r\n    this.serial.resume();\r\n    this.connected = false;\r\n    this.emit('disconnect', this.currentDevice);\r\n    this.emit('close');\r\n    // eslint-disable-next-line no-console\r\n    if (this.DEBUG) console.log('disconnected');\r\n  }\r\n\r\n  async setDeviceName(value, name) {\r\n    if (await this.isDevice(value)) this.devices.push({ value, name });\r\n  }\r\n\r\n  async getDeviceName(value) {\r\n    return (this.devices.find((d) => d.value === value) || { name: '' }).name;\r\n  }\r\n\r\n  // node-serialport properties\r\n  get isOpen() { return this.connected; }\r\n\r\n  get path() { return this.implementation; }\r\n\r\n  get baudRate() { return this.baud; }\r\n\r\n  async open(cb = () => {}) {\r\n    try {\r\n      await this.connect();\r\n    } catch (err) {\r\n      cb?.(err);\r\n      return;\r\n    }\r\n    cb?.();\r\n  }\r\n\r\n  async update(opts = {}, cb = () => {}) {\r\n    try {\r\n      if (opts.baudRate) {\r\n        await this.setBaud(opts.baudRate);\r\n      }\r\n    } catch (err) {\r\n      cb?.(err);\r\n      return;\r\n    }\r\n    cb?.();\r\n  }\r\n\r\n  async close(cb = () => {}) {\r\n    try {\r\n      await this.disconnect();\r\n    } catch (err) {\r\n      cb?.(err);\r\n      return;\r\n    }\r\n    cb?.();\r\n  }\r\n\r\n  async set(opts = {}, cb = () => {}) {\r\n    try {\r\n      await this.setSignals(opts);\r\n    } catch (err) {\r\n      cb?.(err);\r\n      return;\r\n    }\r\n    cb?.();\r\n  }\r\n\r\n  async get(cb = () => {}) {\r\n    let sigs = {};\r\n    try {\r\n      sigs = await this.getSignals();\r\n    } catch (err) {\r\n      cb?.(err, null);\r\n      return;\r\n    }\r\n    cb?.(null, sigs);\r\n  }\r\n\r\n  async read(size) {\r\n    const buff = await this.readBuff();\r\n    return buff && buff.slice(0, Math.min(buff.length, size || Infinity));\r\n  }\r\n\r\n  drain(cb = () => {}) { cb?.(); }\r\n\r\n  flush(cb = () => {}) { cb?.(); }\r\n\r\n  pause() {\r\n    this.serial?.paused?.();\r\n  }\r\n\r\n  resume() {\r\n    this.serial?.resume?.();\r\n  }\r\n\r\n  async write(message, encoding = null, cb = () => {}) {\r\n    if (typeof encoding === 'function') {\r\n      // eslint-disable-next-line no-param-reassign\r\n      cb = encoding;\r\n      // eslint-disable-next-line no-param-reassign\r\n      encoding = null;\r\n    }\r\n    if (this.mute && typeof message === 'string') return;\r\n    try {\r\n      await this.writeBuff(typeof message === 'string' ? Buffer.from(message, encoding || this.encoding) : message);\r\n    } catch (err) {\r\n      cb?.(err);\r\n      return;\r\n    }\r\n    cb?.();\r\n  }\r\n}\r\n\r\nexport default BaseSerial;\r\n","import Vue from 'vue';\r\n// import { v4 as uuid4 } from 'uuid';\r\nimport BrowserSerialPort from 'avrgirl-arduino/lib/browser-serialport';\r\nimport BaseSerial from './base-serial';\r\n\r\nconst { serial } = navigator;\r\n\r\n// eslint-disable-next-line no-console\r\nconsole.log('using navserial');\r\nclass NavSerial extends BaseSerial {\r\n  constructor() {\r\n    super();\r\n    this.requestRequired = true;\r\n    this.devices = JSON.parse(localStorage.portNames || '[]');\r\n    this._currentDevice = null;\r\n    this.implementation = 'navserial';\r\n    this.handlesSelect = true;\r\n\r\n    this._dataHandler = (buff) => {\r\n      this._lastRead = buff;\r\n      // eslint-disable-next-line no-console\r\n      if (this.DEBUG) console.log('read', Buffer.from(buff).toString('hex'));\r\n      if (!this.mute) this.emit('message', buff.toString(this.encoding));\r\n      this.emit('data', buff);\r\n    };\r\n    this._openHandler = (...args) => {\r\n      this.emit('open', ...args);\r\n    };\r\n    this._closeHandler = (...args) => {\r\n      this.emit('close', ...args);\r\n    };\r\n\r\n    this._initSerial();\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  async _getDevice(value) {\r\n    // const devices = await serial.getPorts();\r\n    // console.log(devices);\r\n    // return devices.find((d) => d.id === value) || null;\r\n    return value;\r\n  }\r\n\r\n  async requestDevice() {\r\n    const device = await serial.requestPort({ classCode: 2 });\r\n    this.setCurrentDevice(device);\r\n    // if (!device.id) device.id = uuid4();\r\n    // if (await this.getDeviceName(device.id)) {\r\n    //   console.log(this.getDeviceName(device.id));\r\n    //   this.setCurrentDevice(device.id);\r\n    // } else {\r\n    //   this.emit('deviceNamePrompt', device.id);\r\n    // }\r\n  }\r\n\r\n  async isDevice(value) {\r\n    return !!(await this._getDevice(value));\r\n  }\r\n\r\n  _registerSerial(port) {\r\n    this.serial = new BrowserSerialPort(port, {\r\n      baudRate: this.baud,\r\n      autoOpen: false,\r\n    });\r\n    this.serial.on('data', this._dataHandler);\r\n    this.serial.on('open', this._openHandler);\r\n    this.serial.on('close', this._closeHandler);\r\n  }\r\n\r\n  _unregisterSerial() {\r\n    this.serial.off('data', this._dataHandler);\r\n    this.serial.off('open', this._openHandler);\r\n    this.serial.off('close', this._closeHandler);\r\n  }\r\n\r\n  async setCurrentDevice(value) {\r\n    if (!(await this.isDevice(value))) return;\r\n    if (this.connected) await this.disconnect();\r\n    this._currentDevice = await this._getDevice(value);\r\n    Vue.set(this, 'currentDevice', value);\r\n\r\n    if (this.serial) this._unregisterSerial();\r\n    this._registerSerial(value);\r\n\r\n    this.emit('currentDevice', value);\r\n    try {\r\n      await this.connect();\r\n      window.localStorage.lastNavSerialPort = JSON.stringify(value.getInfo());\r\n    } catch (err) {\r\n      if (err.message === 'Access denied.') {\r\n        this.emit('errorPrompt', 'access_denied');\r\n      }\r\n      // eslint-disable-next-line no-console\r\n      console.error(err);\r\n    }\r\n    // eslint-disable-next-line no-console\r\n    if (this.DEBUG) console.log(value, value.getInfo());\r\n  }\r\n\r\n  async _initSerial() {\r\n    const { usbProductId, usbVendorId } = JSON.parse(window.localStorage.lastNavSerialPort || '{}');\r\n    if (!usbVendorId || !usbProductId) return;\r\n    const devices = await serial.getPorts();\r\n    const device = devices.find((d) => {\r\n      const info = d.getInfo();\r\n      return usbProductId === info.usbProductId && usbVendorId === info.usbVendorId;\r\n    });\r\n    if (device) this.setCurrentDevice(device);\r\n  }\r\n\r\n  async setDeviceName(value, name) {\r\n    if (!(await this.isDevice(value))) return;\r\n    this.devices.push({ value, name });\r\n    localStorage.portNames = JSON.stringify(this.devices);\r\n    this.setCurrentDevice(value);\r\n  }\r\n}\r\n\r\nexport default NavSerial;\r\n"],"sourceRoot":""}