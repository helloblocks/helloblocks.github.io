{"version":3,"sources":["webpack:///./src/plugins/serial/webusb.js","webpack:///./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack:///./src/plugins/serial/base-serial.js"],"names":["navigator","usb","console","log","WebUSBSerial","requestRequired","devices","JSON","parse","localStorage","deviceNames","_currentDevice","_rl","implementation","value","getDevices","find","d","serialNumber","this","opened","transferIn","res","emit","Buffer","from","data","buffer","mute","toString","encoding","requestDevice","filters","classCode","device","getDeviceName","setCurrentDevice","_getDevice","isDevice","disconnect","currentDevice","connect","message","error","buff","transferOut","writeBuff","open","setConfiguration","interfaceNumber","configuration","interfaces","claimInterface","controlTransferOut","requestType","recipient","request","index","_readLoop","close","connected","name","push","stringify","BaseSerial","_typeof","obj","Symbol","iterator","constructor","prototype","signalMap","dtr","rts","brk","cts","dsr","dcd","baud","Number","sessionStorage","currentBaudRate","lastBaud","serial","DEBUG","Vue","$serial","Promise","all","map","isDevices","filter","i","update","baudRate","setBaud","val","sig","trans","Object","keys","forEach","signals","isOpen","Error","sigs","_transSignal","set","get","resolve","reject","read","err","write","pause","resume","cb","opts","setSignals","getSignals","size","readBuff","slice","Math","min","length","Infinity","paused","EventEmitter"],"mappings":"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","file":"js/serial-webusb-app.c0559e24.js","sourcesContent":["import BaseSerial from './base-serial';\n\nconst { usb } = navigator;\nconsole.log('using webusb');\nclass WebUSBSerial extends BaseSerial {\n  constructor() {\n    super();\n    this.requestRequired = true;\n    this.devices = JSON.parse(localStorage.deviceNames || '[]');\n    this._currentDevice = null;\n    this._rl = false;\n    this.implementation = 'webusb';\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async _getDevice(value) {\n    const devices = await usb.getDevices();\n    return devices.find(d => d.serialNumber === value) || null;\n  }\n\n  async _readLoop() {\n    if (!this._currentDevice || !this._currentDevice.opened) {\n      this._rl = false;\n      return;\n    }\n    this._rl = true;\n    const res = await this._currentDevice.transferIn(5, 64);\n    this.emit('data', Buffer.from(res.data.buffer));\n    if (!this.mute) this.emit('message', Buffer.from(res.data.buffer).toString(this.encoding));\n  }\n\n  async requestDevice() {\n    const device = await usb.requestDevice({ filters: [{ classCode: 2 }] });\n    if (await this.getDeviceName(device.serialNumber)) {\n      console.log(this.getDeviceName(device.serialNumber));\n      this.setCurrentDevice(device.serialNumber);\n    } else {\n      this.emit('deviceNamePrompt', device.serialNumber);\n    }\n  }\n\n  async isDevice(value) {\n    return !!(await this._getDevice(value));\n  }\n\n  async setCurrentDevice(value) {\n    if (!(await this.isDevice(value))) return;\n    if (this._currentDevice) this.disconnect();\n    this._currentDevice = await this._getDevice(value);\n    this.currentDevice = value;\n    this.emit('currentDevice', value);\n    try {\n      await this.connect();\n    } catch (err) {\n      if (err.message === 'Access denied.') {\n        this.emit('errorPrompt', 'access_denied');\n      }\n      console.error([err]);\n    }\n  }\n\n  async writeBuff(buff) {\n    await this._currentDevice.transferOut(4, buff);\n  }\n\n  async write(message) {\n    if (this.mute) return;\n    await this.writeBuff(Buffer.from(message, this.encoding));\n  }\n\n  async connect() {\n    if (!this._currentDevice || this._currentDevice.opened) return;\n    const device = await this._getDevice(this.currentDevice);\n    console.log(1, this._currentDevice, device);\n    await device.open();\n    console.log(2);\n    await this._currentDevice.setConfiguration(1);\n    console.log(3);\n    const { interfaceNumber } = this._currentDevice.configuration.interfaces[0];\n    await this._currentDevice.claimInterface(interfaceNumber);\n    console.log(4);\n    await this._currentDevice.controlTransferOut({\n      requestType: 'class',\n      recipient: 'interface',\n      request: 0x22,\n      value: 0x01,\n      index: 0x02,\n    });\n    console.log(5);\n    this.emit('connected', this.currentDevice);\n    console.log(6);\n    if (!this._rl) this._readLoop();\n  }\n\n  async disconnect() {\n    if (!this._currentDevice || !this._currentDevice.opened) return;\n    await this._currentDevice.close();\n    this.connected = false;\n    this.emit('disconnect', this.currentDevice);\n  }\n\n  async setDeviceName(value, name) {\n    if (!(await this.isDevice(value))) return;\n    this.devices.push({ value, name });\n    localStorage.deviceNames = JSON.stringify(this.devices);\n    this.setCurrentDevice(value);\n  }\n}\n\nexport default WebUSBSerial;\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nimport EventEmitter from 'events';\n\n/*\nInterface should emit the following:\nthis.emit('data', buffer)\nthis.emit('message', string) // should be a string version of buffer\n// message should not be emitted whilst this.mute === true\nthis.emit('connected', value)\nthis.emit('disconnected', value)\nthis.emit('deviceNamePrompt', value) // prompts the user to input a readable device name\n*/\n\nconst signalMap = {\n  dtr: 'dataTerminalReady',\n  rts: 'requestToSend',\n  brk: 'break',\n  cts: 'clearToSend',\n  dsr: 'dataSetReady',\n  dcd: 'dataCarrierDetect',\n};\n\nclass BaseSerial extends EventEmitter {\n  constructor() {\n    super();\n    this.requestRequired = false;\n    this.mute = false;\n    this.baud = Number(sessionStorage.currentBaudRate) || 9600;\n    this.lastBaud = 9600;\n    this.encoding = 'ascii';\n    this.devices = [];\n    this.currentDevice = null;\n    this.connected = false;\n    this.implementation = 'basic';\n    this.serial = null;\n    // this.DEBUG = !!process.env.VUE_APP_DEBUG;\n    this.DEBUG = true;\n    // eslint-disable-next-line no-console\n    // console.log('debug', this.DEBUG);\n  }\n\n  install(Vue) {\n    // eslint-disable-next-line no-param-reassign\n    Vue.$serial = this;\n    // eslint-disable-next-line no-param-reassign\n    Vue.prototype.$serial = this;\n  }\n\n  async requestDevice() { return {}; }\n\n  async listDevices() {\n    const isDevices = await Promise.all(this.devices.map((device) => this.isDevice(device.value)));\n    return this.devices.filter((device, i) => isDevices[i]);\n  }\n\n  async isDevice(value) { return true; }\n\n  async setCurrentDevice(value) { this.currentDevice = value; }\n\n  async setBaud(baud) {\n    // eslint-disable-next-line no-console\n    if (this.DEBUG) console.log('setting speed', baud);\n    if (this.serial) await this.serial.update({ baudRate: baud });\n    this.baud = baud;\n    sessionStorage.currentBaudRate = baud;\n    return baud;\n  }\n\n  async resetBaud() {\n    this.setBaud(this.lastBaud);\n  }\n\n  async setMute(val) { this.mute = val; }\n\n  _transSignal(sig) {\n    let trans = {};\n    if (typeof sig === 'object') {\n      trans = { ...sig };\n    }\n    if (sig === 'on' || sig === true) {\n      trans = {\n        dtr: true,\n        rts: true,\n      };\n    }\n    if (sig === 'off' || sig === false) {\n      trans = {\n        dtr: false,\n        rts: false,\n      };\n    }\n    Object.keys(signalMap).forEach((i) => {\n      if (typeof trans[i] === 'boolean') trans[signalMap[i]] = trans[i];\n      if (typeof trans[signalMap[i]] === 'boolean') trans[i] = trans[signalMap[i]];\n    });\n    return trans;\n  }\n\n  async setSignals(signals) {\n    if (!this.serial?.isOpen) throw new Error('Cannot write to closed port.');\n    // eslint-disable-next-line no-console\n    if (this.DEBUG) console.log('signaling', signals);\n    const sigs = this._transSignal(signals);\n    return this.serial.set(sigs);\n  }\n\n  async getSignals() {\n    if (!this.serial?.isOpen) throw new Error('Cannot read closed port.');\n    const signals = await this.serial.get();\n    return this._transSignal(signals);\n  }\n\n  readBuff() {\n    return new Promise((resolve, reject) => this.serial?.read((buff, err) => {\n      if (err) reject(err);\n      else resolve();\n    }));\n  }\n\n  writeBuff(buff) {\n    // eslint-disable-next-line no-console\n    if (this.DEBUG) console.log('write', buff.toString('hex'));\n    return new Promise((resolve, reject) => this.serial.write(buff, (err) => {\n      if (err) reject(err);\n      else resolve();\n    }));\n  }\n\n  connect() {\n    if (!this.serial) throw new Error('Cannot connect to un-initiated device.');\n    if (!this._currentDevice || this.serial.isOpen) {\n      // eslint-disable-next-line no-console\n      if (this.DEBUG) console.log('skipping connect');\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => this.serial.open((err) => {\n      if (err) return reject(err);\n      this.connected = true;\n      this.emit('connected', this.currentDevice);\n      return resolve();\n    }));\n  }\n\n  async disconnect() {\n    if (!this._currentDevice || !this.serial?.isOpen) return;\n    this.serial.pause();\n    await this.serial.close();\n    this.serial.resume();\n    this.connected = false;\n    this.emit('disconnect', this.currentDevice);\n    this.emit('close');\n    // eslint-disable-next-line no-console\n    if (this.DEBUG) console.log('disconnected');\n  }\n\n  async setDeviceName(value, name) {\n    if (await this.isDevice(value)) this.devices.push({ value, name });\n  }\n\n  async getDeviceName(value) {\n    return (this.devices.find((d) => d.value === value) || { name: '' }).name;\n  }\n\n  // node-serialport properties\n  get isOpen() { return this.connected; }\n\n  get path() { return this.implementation; }\n\n  get baudRate() { return this.baud; }\n\n  async open(cb = () => {}) {\n    try {\n      await this.connect();\n    } catch (err) {\n      cb?.(err);\n      return;\n    }\n    cb?.();\n  }\n\n  async update(opts = {}, cb = () => {}) {\n    try {\n      if (opts.baudRate) {\n        await this.setBaud(opts.baudRate);\n      }\n    } catch (err) {\n      cb?.(err);\n      return;\n    }\n    cb?.();\n  }\n\n  async close(cb = () => {}) {\n    try {\n      await this.disconnect();\n    } catch (err) {\n      cb?.(err);\n      return;\n    }\n    cb?.();\n  }\n\n  async set(opts = {}, cb = () => {}) {\n    try {\n      await this.setSignals(opts);\n    } catch (err) {\n      cb?.(err);\n      return;\n    }\n    cb?.();\n  }\n\n  async get(cb = () => {}) {\n    let sigs = {};\n    try {\n      sigs = await this.getSignals();\n    } catch (err) {\n      cb?.(err, null);\n      return;\n    }\n    cb?.(null, sigs);\n  }\n\n  async read(size) {\n    const buff = await this.readBuff();\n    return buff && buff.slice(0, Math.min(buff.length, size || Infinity));\n  }\n\n  drain(cb = () => {}) { cb?.(); }\n\n  flush(cb = () => {}) { cb?.(); }\n\n  pause() {\n    this.serial?.paused?.();\n  }\n\n  resume() {\n    this.serial?.resume?.();\n  }\n\n  async write(message, encoding = null, cb = () => {}) {\n    if (typeof encoding === 'function') {\n      // eslint-disable-next-line no-param-reassign\n      cb = encoding;\n      // eslint-disable-next-line no-param-reassign\n      encoding = null;\n    }\n    if (this.mute && typeof message === 'string') return;\n    try {\n      await this.writeBuff(typeof message === 'string' ? Buffer.from(message, encoding || this.encoding) : message);\n    } catch (err) {\n      cb?.(err);\n      return;\n    }\n    cb?.();\n  }\n}\n\nexport default BaseSerial;\n"],"sourceRoot":""}