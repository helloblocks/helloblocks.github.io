{"version":3,"sources":["webpack:///./src/plugins/serial/chrome-extension.js","webpack:///./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack:///./src/plugins/serial/base-serial.js"],"names":["console","log","ExtensionSerial","requestRequired","_listPromise","promisify","list","devices","_currentDevice","_rl","implementation","this","filter","dev","manufacturer","vendorId","productId","map","name","comName","value","find","d","_getDevice","isDevice","_port","disconnect","currentDevice","emit","connect","message","error","signals","Promise","resolve","reject","set","_transSignal","err","Error","drain","buff","write","data","Buffer","from","toString","mute","writeBuff","encoding","SerialPort","baudRate","baud","on","connected","setSignals","once","close","BaseSerial","_typeof","obj","Symbol","iterator","constructor","prototype","signalMap","dtr","rts","brk","cts","dsr","dcd","Number","sessionStorage","currentBaudRate","lastBaud","serial","DEBUG","Vue","$serial","all","device","isDevices","i","update","setBaud","val","sig","trans","Object","keys","forEach","isOpen","sigs","get","read","open","pause","resume","push","cb","opts","getSignals","size","readBuff","slice","Math","min","length","Infinity","paused","EventEmitter"],"mappings":"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","file":"js/serial-chrome-extension.ddacf598.js","sourcesContent":["import { promisify } from 'util';\nimport { SerialPort, list } from './lib/chrome-serial';\nimport BaseSerial from './base-serial';\n\n// eslint-disable-next-line no-console\nconsole.log('using chrome extension');\nclass ExtensionSerial extends BaseSerial {\n  constructor() {\n    super();\n    this.requestRequired = false;\n    this._listPromise = promisify(list);\n    this.devices = [];\n    this._currentDevice = null;\n    this._rl = false;\n    this.implementation = 'chrome-extension';\n  }\n\n  async listDevices() {\n    this.devices = (await this._listPromise())\n      .filter((dev) => dev.manufacturer || dev.vendorId !== '0x0' || dev.productId !== '0x0')\n      .map((dev) => ({ name: dev.comName, value: dev.comName }));\n    return this.devices;\n  }\n\n  async _getDevice(value) {\n    const devices = await this._listPromise();\n    return devices.find((d) => d.comName === value) || null;\n  }\n\n  async isDevice(value) {\n    return !!(await this._getDevice(value));\n  }\n\n  async setCurrentDevice(value) {\n    if (!(await this.isDevice(value))) return;\n    if (this._port) this.disconnect();\n    this.currentDevice = value;\n    this.emit('currentDevice', value);\n    try {\n      await this.connect();\n    } catch (err) {\n      if (err.message === 'Access denied.') {\n        this.emit('errorPrompt', 'access_denied');\n      }\n      // eslint-disable-next-line no-console\n      console.error([err]);\n    }\n  }\n\n  setSignals(signals) {\n    return new Promise((resolve, reject) => {\n      if (!this._port) reject(new Error('Cannot write to closed port.'));\n      else {\n        this._port.set(this._transSignal(signals), (err) => {\n          if (err) reject(err);\n          else resolve();\n        });\n      }\n    });\n  }\n\n  drain() {\n    return new Promise((resolve, reject) => {\n      if (!this._port) reject(new Error('Cannot write to closed port.'));\n      else {\n        this._port.drain((err) => {\n          if (err) reject(err);\n          else resolve();\n        });\n      }\n    });\n  }\n\n  async writeBuff(buff) {\n    if (!this._port) throw new Error('Cannot write to closed port.');\n    // console.log('down', Buffer.from(buff).toString('hex'));\n    await this._port.write({ data: Buffer.from(buff).toString('base64') });\n    // await this._port.flush();\n    // setTimeout(() => this._port.flush(), 10);\n  }\n\n  async write(message) {\n    if (this.mute) return;\n    await this.writeBuff(Buffer.from(message, this.encoding));\n  }\n\n  connect() {\n    return new Promise((resolve, reject) => {\n      if (!this.currentDevice || this._port) {\n        // console.log('connect', this.currentDevice, this._port);\n        resolve();\n        return;\n      }\n      this._port = new SerialPort(\n        this.currentDevice,\n        { baudRate: this.baud },\n        true,\n        (err) => {\n          if (err) {\n            this.emit('message', `<ERROR: ${err.message}>`);\n            reject(err);\n          }\n          this._port.on('data', (buff) => {\n            // console.log('up', buff, buff.toString('hex'));\n            this.emit('data', buff);\n            if (!this.mute) this.emit('message', buff.toString(this.encoding));\n          });\n          this._port.on('close', () => {\n            this.connected = false;\n            this.emit('disconnect', this.currentDevice);\n            this._port = null;\n            // this.currentDevice = null;\n          });\n          this._port.on('disconnect', () => {\n            this.connected = false;\n            this.emit('disconnect', this.currentDevice);\n            this._port = null;\n            // this.currentDevice = null;\n          });\n          this._port.on('error', (error) => {\n            this.emit('message', `<ERROR: ${error.message}>`);\n          });\n          this.connected = true;\n          this.emit('connected', this.currentDevice);\n          this.setSignals('on');\n          resolve(this.currentDevice);\n        },\n      );\n    });\n  }\n\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (!this._port) return;\n      this._port.once('disconnect', (err) => (err ? reject(err) : resolve()));\n      this._port.close();\n    });\n  }\n}\n\nexport default ExtensionSerial;\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nimport EventEmitter from 'events';\n\n/*\nInterface should emit the following:\nthis.emit('data', buffer)\nthis.emit('message', string) // should be a string version of buffer\n// message should not be emitted whilst this.mute === true\nthis.emit('connected', value)\nthis.emit('disconnected', value)\nthis.emit('deviceNamePrompt', value) // prompts the user to input a readable device name\n*/\n\nconst signalMap = {\n  dtr: 'dataTerminalReady',\n  rts: 'requestToSend',\n  brk: 'break',\n  cts: 'clearToSend',\n  dsr: 'dataSetReady',\n  dcd: 'dataCarrierDetect',\n};\n\nclass BaseSerial extends EventEmitter {\n  constructor() {\n    super();\n    this.requestRequired = false;\n    this.mute = false;\n    this.baud = Number(sessionStorage.currentBaudRate) || 9600;\n    this.lastBaud = 9600;\n    this.encoding = 'ascii';\n    this.devices = [];\n    this.currentDevice = null;\n    this.connected = false;\n    this.implementation = 'basic';\n    this.serial = null;\n    // this.DEBUG = !!process.env.VUE_APP_DEBUG;\n    this.DEBUG = true;\n    // eslint-disable-next-line no-console\n    // console.log('debug', this.DEBUG);\n  }\n\n  install(Vue) {\n    // eslint-disable-next-line no-param-reassign\n    Vue.$serial = this;\n    // eslint-disable-next-line no-param-reassign\n    Vue.prototype.$serial = this;\n  }\n\n  async requestDevice() { return {}; }\n\n  async listDevices() {\n    const isDevices = await Promise.all(this.devices.map((device) => this.isDevice(device.value)));\n    return this.devices.filter((device, i) => isDevices[i]);\n  }\n\n  async isDevice(value) { return true; }\n\n  async setCurrentDevice(value) { this.currentDevice = value; }\n\n  async setBaud(baud) {\n    // eslint-disable-next-line no-console\n    if (this.DEBUG) console.log('setting speed', baud);\n    if (this.serial) await this.serial.update({ baudRate: baud });\n    this.baud = baud;\n    sessionStorage.currentBaudRate = baud;\n    return baud;\n  }\n\n  async resetBaud() {\n    this.setBaud(this.lastBaud);\n  }\n\n  async setMute(val) { this.mute = val; }\n\n  _transSignal(sig) {\n    let trans = {};\n    if (typeof sig === 'object') {\n      trans = { ...sig };\n    }\n    if (sig === 'on' || sig === true) {\n      trans = {\n        dtr: true,\n        rts: true,\n      };\n    }\n    if (sig === 'off' || sig === false) {\n      trans = {\n        dtr: false,\n        rts: false,\n      };\n    }\n    Object.keys(signalMap).forEach((i) => {\n      if (typeof trans[i] === 'boolean') trans[signalMap[i]] = trans[i];\n      if (typeof trans[signalMap[i]] === 'boolean') trans[i] = trans[signalMap[i]];\n    });\n    return trans;\n  }\n\n  async setSignals(signals) {\n    if (!this.serial?.isOpen) throw new Error('Cannot write to closed port.');\n    // eslint-disable-next-line no-console\n    if (this.DEBUG) console.log('signaling', signals);\n    const sigs = this._transSignal(signals);\n    return this.serial.set(sigs);\n  }\n\n  async getSignals() {\n    if (!this.serial?.isOpen) throw new Error('Cannot read closed port.');\n    const signals = await this.serial.get();\n    return this._transSignal(signals);\n  }\n\n  readBuff() {\n    return new Promise((resolve, reject) => this.serial?.read((buff, err) => {\n      if (err) reject(err);\n      else resolve();\n    }));\n  }\n\n  writeBuff(buff) {\n    // eslint-disable-next-line no-console\n    if (this.DEBUG) console.log('write', buff.toString('hex'));\n    return new Promise((resolve, reject) => this.serial.write(buff, (err) => {\n      if (err) reject(err);\n      else resolve();\n    }));\n  }\n\n  connect() {\n    if (!this.serial) throw new Error('Cannot connect to un-initiated device.');\n    if (!this._currentDevice || this.serial.isOpen) {\n      // eslint-disable-next-line no-console\n      if (this.DEBUG) console.log('skipping connect');\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => this.serial.open((err) => {\n      if (err) return reject(err);\n      this.connected = true;\n      this.emit('connected', this.currentDevice);\n      return resolve();\n    }));\n  }\n\n  async disconnect() {\n    if (!this._currentDevice || !this.serial?.isOpen) return;\n    this.serial.pause();\n    await this.serial.close();\n    this.serial.resume();\n    this.connected = false;\n    this.emit('disconnect', this.currentDevice);\n    this.emit('close');\n    // eslint-disable-next-line no-console\n    if (this.DEBUG) console.log('disconnected');\n  }\n\n  async setDeviceName(value, name) {\n    if (await this.isDevice(value)) this.devices.push({ value, name });\n  }\n\n  async getDeviceName(value) {\n    return (this.devices.find((d) => d.value === value) || { name: '' }).name;\n  }\n\n  // node-serialport properties\n  get isOpen() { return this.connected; }\n\n  get path() { return this.implementation; }\n\n  get baudRate() { return this.baud; }\n\n  async open(cb = () => {}) {\n    try {\n      await this.connect();\n    } catch (err) {\n      cb?.(err);\n      return;\n    }\n    cb?.();\n  }\n\n  async update(opts = {}, cb = () => {}) {\n    try {\n      if (opts.baudRate) {\n        await this.setBaud(opts.baudRate);\n      }\n    } catch (err) {\n      cb?.(err);\n      return;\n    }\n    cb?.();\n  }\n\n  async close(cb = () => {}) {\n    try {\n      await this.disconnect();\n    } catch (err) {\n      cb?.(err);\n      return;\n    }\n    cb?.();\n  }\n\n  async set(opts = {}, cb = () => {}) {\n    try {\n      await this.setSignals(opts);\n    } catch (err) {\n      cb?.(err);\n      return;\n    }\n    cb?.();\n  }\n\n  async get(cb = () => {}) {\n    let sigs = {};\n    try {\n      sigs = await this.getSignals();\n    } catch (err) {\n      cb?.(err, null);\n      return;\n    }\n    cb?.(null, sigs);\n  }\n\n  async read(size) {\n    const buff = await this.readBuff();\n    return buff && buff.slice(0, Math.min(buff.length, size || Infinity));\n  }\n\n  drain(cb = () => {}) { cb?.(); }\n\n  flush(cb = () => {}) { cb?.(); }\n\n  pause() {\n    this.serial?.paused?.();\n  }\n\n  resume() {\n    this.serial?.resume?.();\n  }\n\n  async write(message, encoding = null, cb = () => {}) {\n    if (typeof encoding === 'function') {\n      // eslint-disable-next-line no-param-reassign\n      cb = encoding;\n      // eslint-disable-next-line no-param-reassign\n      encoding = null;\n    }\n    if (this.mute && typeof message === 'string') return;\n    try {\n      await this.writeBuff(typeof message === 'string' ? Buffer.from(message, encoding || this.encoding) : message);\n    } catch (err) {\n      cb?.(err);\n      return;\n    }\n    cb?.();\n  }\n}\n\nexport default BaseSerial;\n"],"sourceRoot":""}